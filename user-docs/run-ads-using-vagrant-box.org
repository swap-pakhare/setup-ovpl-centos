#+TITLE: Run ADS using an existing vagrant box
#+AUTHOR: VLEAD
#+DATE: [2017-08-24 Thu]
#+SETUPFILE: ./org-templates/level-0.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document describes the steps for setting up =ADS=
  service in development environment using an existing
  vagrant box.


* Assumption 
  The developer environment should have installed the
  following software.
  1. vagrant - any version
  2. virtualbox: any of the following versions - 4.0.x,
     4.1.x, 4.2.x, 4.3.x, 5.0.x, and 5.1.x

  Please refer [[https://www.vagrantup.com/docs/virtualbox/][virtualbox]] and [[https://www.vagrantup.com/docs/installation/][vagrant]] installation steps for
  installing the above software in development environment.


* Steps to run =ADS= service
  1. Download the ads vagrant box
     #+BEGIN_EXAMPLE
     wget http://files.vlabs.ac.in/downloads/vagrant-boxes/ads-on-centos.box
     #+END_EXAMPLE

  2. Add downloaded box to vagrant box list
     #+BEGIN_EXAMPLE
     vagrant box add ads-on-centos ads-on-centos.box
     #+END_EXAMPLE

  3. Check whether downloaded =ads-on-centos= box is added.
     #+BEGIN_EXAMPLE
     vagrant box list 
     #+END_EXAMPLE

  4. Above command must list =ads-on-centos= 

  5. Intialize the machine
     #+BEGIN_EXAMPLE
     cd ~ 
     mkdir ads-on-centos 
     cd ads-on-centos 
     vagrant init ads-on-centos 
     #+END_EXAMPLE

  6. Edit the =Vagrantfile= using editor (like e.g emacs,
     vim, etc.) and uncomment below line by removing =#= in
     the beginning of the line to set the vagrant to use
     private network (e.g 192.168.33.10)
     #+BEGIN_EXAMPLE
     #config.vm.network "private_network", ip: "192.168.33.10" 
     config.vm.network "private_network", ip: "192.168.33.10" 
     #+END_EXAMPLE

  7. Boot the machine
     #+BEGIN_EXAMPLE
     vagrant up 
     #+END_EXAMPLE

  8. Login in to the machine as root.  Sometimes, login will
     succeed after a few tries. 
     #+BEGIN_EXAMPLE
     vagrant ssh 
     sudo su -
     #+END_EXAMPLE

  9. Pull the latest ADS source code
     + As root, go into =/root/ovpl= directory, checkout branch to
       =develop= and pull the changes. 
       #+BEGIN_EXAMPLE
        cd /root/ovpl 
        git checkout develop 
        git pull origin develop
       #+END_EXAMPLE

  10. Configure Proxy
      + if your network is behind proxy, configure
        =HTTP_PROXY= and =HTTPS_PROXY= of =ENVIRONMENT=
        variable in =/root/ovpl/config/config.json= file
        #+BEGIN_EXAMPLE
        "ENVIRONMENT": {
        "HTTP_PROXY":"http://proxy.iiit.ac.in:8080",
        "HTTPS_PROXY":"http://proxy.iiit.ac.in:8080"
        },
        #+END_EXAMPLE
      
     + Set the COOKIE_SECRET value in CONTROLLER_CONFIG to
       some long randomly generated string.
       #+BEGIN_EXAMPLE
       "COOKIE_SECRET": "<generate a long random UUID>",
       #+END_EXAMPLE  

  11. Configure OS template

      + ADS supoort of different operating systems :: ADS
           currently supports the following OS and the
           corresponding versions and the web server.  All
           the three are for x86, 64 bit architecture.
        1. Ubuntu 12.04 with apache

        2. Ubuntu 14.04 with nginx

        3. Centos 6.9 with apache

      + Support for Ubuntu 12.04 :: =ads-on-centos.box= comes
           with default template.  If the lab to be deployed
           on a machine with OS =ubuntu 12.04=, then no
           configuration changes are required to the ADS.
           The file =labspec.json= in the lab that needs
           deployment specifies the OS and its version.
           #+BEGIN_EXAMPLE
           "platform": {
             "os": "ubuntu",
             "osVersion": "12",
             "arch": "x64",
             .....
             .....
           #+END_EXAMPLE

           ADS picks up the right template from the
           configuration file
           =/root/ovpl/config/adapters/centos_openvz_config.py=.  
           #+BEGIN_EXAMPLE
           supported_template = [
             {'os': 'UBUNTU', 'version': '12.04',
              'id': 'ubuntu-12.04-custom-with-emacs-x86_64'}
           ]
           #+END_EXAMPLE

      + Configure for a diffetent OS :: If the application is to be
           deployed on Ubuntu 14.04, do the following
        1. add the following lines to
           =/root/ovpl/config/adapters/centos_openvz_config.py=.
           #+BEGIN_EXAMPLE
        supported_template = [
        {'os': 'UBUNTU', 'version': '12.04',
         'id': 'ubuntu-12.04-custom-with-emacs-x86_64'},
        {'os': 'UBUNTU', 'version': '14.04',
         'id': 'ubuntu-14.04_x86_64-custom-emacs-nginx'}
        #+END_EXAMPLE

        2. download the os template
           =ubuntu-14.04_x86_64-custom-emacs-nginx.tar.gz=
           from
           =http://files.vlabs.ac.in/downloads/templates/=
           to =/vz/templates/cache/= directory.
           #+BEGIN_EXAMPLE
           cd /vz/templates/cache/
           wget http://files.vlabs.ac.in/downloads/templates/ubuntu-14.04_x86_64-custom-emacs-nginx.tar.gz
           #+END_EXAMPLE

  12. Setting up ADS-web-app
      + Install dependencies This assumes apache server is
        installed. If not, please install the apache server.
      #+BEGIN_EXAMPLE
      sudo su -
      yum update -y
      yum install epel-release
      yum install "mod_wsgi" -y
      yum install python-pip
      cd /root/ovpl/src/ads-web-app
      python setup.py install
      
      rsync -avz --progress /root/ovpl/src/ads-web-app /var/www/html/
      chmod -R 777 /var/www/html/ads-web-app
      #+END_EXAMPLE
      

  13. Setup Google Oauth credentials
      + Create a project at [[https://console.developers.google.com][Google Dashboard]] and create
        =Oauth= credentials.
      + Steps to create a project
        1. Click on =Credentials= on left menu bar.
        2. Click =Create credentials= and select =OAuth
           Client ID=
        3. Select =Web Application=
        4.  On successful creation of credentials set  =Authorized
           JavaScript origins= to
           #+BEGIN_EXAMPLE
           http://local-ads.com:8080/
           #+END_EXAMPLE       
        5. Set Authorized redirect URIs to
        #+BEGIN_EXAMPLE
        http://local-ads.com:8080/login/authorized
        #+END_EXAMPLE5. Mention the following url for =Authorized
           redirect URI=
           #+BEGIN_EXAMPLE
           http://local-ads.com:8080/login/authorized
           #+END_EXAMPLE

      + Provide =CONSUMER_KEY= and =CONSUMER_SECRET= in
      =/var/www/html/ads-web-app/config.py=.
        #+BEGIN_EXAMPLE
        CONSUMER_KEY = "<consumerkey>" 
        CONSUMER_SECRET = "<consumer secret key>" 
        #+END_EXAMPLE

  14. Setup ADS credentials in the same file =/root/ovpl/src/ads-web-app/config.py=
      + Add email ids to =AUTHORIZED_USERS=
        #+BEGIN_EXAMPLE
        AUTHORIZED_USERS = [ "heregoesemail@gmail.com",
        "your mail id"
        ]
        #+END_EXAMPLE

  15. Start ADS services
      + As root, go to =ovpl= directory and run
        =manage_services.sh= file
        #+BEGIN_EXAMPLE
        cd /root/ovpl 
        ./manage_services.sh (or)
        ./manage_services.sh start 
       #+END_EXAMPLE

      + Other commands to manage the services
        + To stop the services
        #+BEGIN_EXAMPLE
        ./manage_services.sh stop 
        #+END_EXAMPLE
        + To stop or start specific service use
        =./manage_services.sh [action] [services]=
        - [action]   = start (or) stop
        - [services] = LOGGER (or) ADAPTER (or) CONTROLLER

        #+BEGIN_EXAMPLE
        ./manage_services.sh start LOGGER 
        #+END_EXAMPLE
        + For more help use =./manage_services.sh --help=.

  16. Start the ADS web application service
      + Set Proxy :: If the network is behind a proxy,
           export proxy variables.  The below example shows
           for a network behind =IIIT= proxy. 
        #+BEGIN_EXAMPLE
         export http_proxy="http://proxy.iiit.ac.in:8080"
         export https_proxy="http://proxy.iiit.ac.in:8080"
        #+END_EXAMPLE

      + Run =ads-web-app= service ::
        #+BEGIN_EXAMPLE
         cd /var/www/html/ads-web-app/
         python app.py &
        #+END_EXAMPLE

  17. The above steps configure the machine and start the
      ADS services.

  18. Set up local DNS entry on the host machine.  This is
      the machine where the browser is started.

      + Edit =/etc/hosts= file on host machine where the ADS
        application is run from the browser to assign the
        domain name to =192.168.33.10  local-ads.com=. This is to be done
        for successful redirection page for google
        authorization page

      + Execute below command to reflect the domain name
        change in =/etc/hosts= (Note :- Below command should
        be executed on host machine and not on vagrant
        machine)
        #+BEGIN_EXAMPLE
        echo '192.168.33.10 local-ads.com' >> /etc/hosts
        #+END_EXAMPLE

  19. Access =ADS= on browser
      - Open the location =http://local-ads.com:8080= from
        the browser and provide the lab id, lab sources url
        and version/tag.
      - View the logs at /root/logs/ovpl.log by
        #+BEGIN_EXAMPLE
        tail -f /root/logs/ovpl.log 
        #+END_EXAMPLE
