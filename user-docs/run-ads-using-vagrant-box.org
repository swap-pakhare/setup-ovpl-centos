#+TITLE: Run ADS using an existing vagrant box
#+AUTHOR: VLEAD
#+DATE: [2017-08-24 Thu]
#+SETUPFILE: ./org-templates/level-0.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document describes the steps for setting up =ADS=
  service in development environment using an existing
  vagrant box.


* Assumption 
  The developer environment should have installed the
  following software.
  1. vagrant - 1.9.x
  2. virtualbox: 5.1.26

  Please refer [[https://www.vagrantup.com/docs/virtualbox/][virtualbox]] and [[https://www.vagrantup.com/docs/installation/][vagrant]] installation steps for
  installing the above software in development environment.


* Steps to run =ADS= service
  1. Download the ads vagrant box
     #+BEGIN_EXAMPLE
     wget http://files.vlabs.ac.in/downloads/vagrant-boxes/ads-on-centos.box
     #+END_EXAMPLE

  2. Add downloaded box to vagrant box list
     #+BEGIN_EXAMPLE
     vagrant box add ads-on-centos ads-on-centos.box
     #+END_EXAMPLE

  3. Check whether downloaded =ads-on-centos= box is added.
     #+BEGIN_EXAMPLE
     vagrant box list 
     #+END_EXAMPLE

  4. Above command must list =ads-on-centos= 

  5. Intialize the machine
     #+BEGIN_EXAMPLE
     cd ~ 
     mkdir ads-on-centos 
     cd ads-on-centos 
     vagrant init ads-on-centos 
     #+END_EXAMPLE

  6. Edit the =Vagrantfile= using editor (like e.g emacs,
     vim, etc.) and uncomment below line by removing =#= in
     the beginning of the line to set the vagrant to use
     private network (e.g 192.168.33.10)
     #+BEGIN_EXAMPLE
     #config.vm.network "private_network", ip: "192.168.33.10" 
     config.vm.network "private_network", ip: "192.168.33.10" 
     #+END_EXAMPLE

  7. Boot the machine
     #+BEGIN_EXAMPLE
     vagrant up 
     #+END_EXAMPLE

  8. Login in to the machine as root.  Sometimes, login will
     succeed after a few tries. 
     #+BEGIN_EXAMPLE
     vagrant ssh 
     sudo su -
     #+END_EXAMPLE

  9. Pull the latest ADS source code
     + As root, go into =/root/ovpl= directory, checkout branch to
       =develop= and pull the changes. 
       #+BEGIN_EXAMPLE
        cd /root/ovpl 
        git checkout develop 
        git pull origin develop
       #+END_EXAMPLE

  10. Configure Proxy
      + if your network is behind proxy, configure
        =HTTP_PROXY= and =HTTPS_PROXY= of =ENVIRONMENT=
        variable in =/root/ovpl/config/config.json= file
        #+BEGIN_EXAMPLE
        "ENVIRONMENT": {
        "HTTP_PROXY":"http://proxy.iiit.ac.in:8080",
        "HTTPS_PROXY":"http://proxy.iiit.ac.in:8080"
        },
        #+END_EXAMPLE
  11. Setting up ADS-web-app
      + Install dependencies This assumes apache server is
        installed. If not, please install the apache server.
      #+BEGIN_EXAMPLE
      sudo su -
      yum update -y
      yum install epel-release
      yum install "mod_wsgi" -y
      yum install python-pip
      cd /root/ovpl/src/ads-web-app
      python setup.py install
      rsync -avz --progress /root/ovpl/src/ads-web-app /var/www/html/
      chmod -R 777 /var/www/html/ads-web-app
      #+END_EXAMPLE
  12. Setup Google Oauth credentials
      + Create a project at [[https://console.developers.google.com][Google Dashboard]] and create
        =Oauth= credentials.
      + Steps to create a project
        1. Click on =Credentials= on left menu bar.
        2. Click =Create credentials= and select =OAuth
           Client ID=
        3. Select =Web Application=
        4. Give the link in =Authorized JavaScript origins= as
           #+BEGIN_EXAMPLE
           http://local-ads.com:8080/
           #+END_EXAMPLE       
        5. Give the link in =Authorized redirect URIs= as
           #+BEGIN_EXAMPLE
           http://local-ads.com:8080/login/authorized
           #+END_EXAMPLE
        6. Click on create, it prompts a pop-up with
           =CONSUMER_KEY= and =CONSUMER_SECRET= add them in
           =/var/www/html/ads-web-app/config.py=.
        #+BEGIN_EXAMPLE
        CONSUMER_KEY = "<consumerkey>" 
        CONSUMER_SECRET = "<consumer secret key>" 
        #+END_EXAMPLE
  13. Setup ADS credentials in the same file
       =/root/ovpl/src/ads-web-app/config.py=
     + Add email ids to =AUTHORIZED_USERS=
        #+BEGIN_EXAMPLE
        AUTHORIZED_USERS = [ "heregoesemail@gmail.com",
                             "your mail id"
        ]
        #+END_EXAMPLE
  14. Copy =/root/ovpl/src/ads-web-app= to =/var/www/html/=
  15. Start ADS services
      + As root, go to =ovpl= directory and run
        =manage_services.sh= file
        #+BEGIN_EXAMPLE
        cd /root/ovpl 
        ./manage_services.sh (or)
        ./manage_services.sh start 
       #+END_EXAMPLE

      + Other commands to manage the services
        + To stop the services
        #+BEGIN_EXAMPLE
        ./manage_services.sh stop 
        #+END_EXAMPLE
        + To stop or start specific service use
        =./manage_services.sh [action] [services]=
        - [action]   = start (or) stop
        - [services] = LOGGER (or) ADAPTER (or) CONTROLLER

        #+BEGIN_EXAMPLE
        ./manage_services.sh start LOGGER 
        #+END_EXAMPLE
        + For more help use =./manage_services.sh --help=.
  16. Start the ADS web application service
      + Run =ads-web-app= service ::
        #+BEGIN_EXAMPLE
        cd /var/www/html/ads-web-app/
        python app.py &
        #+END_EXAMPLE
  17. The above steps configure the machine and start the
      ADS services.
  18. Set up local DNS entry on the host machine.  This is
      the machine where the browser is started.

      + Edit =/etc/hosts= file on base machine, assign the
        domain name to =192.168.33.10  local-ads.com=. This is to be done
        for successful redirection page for google
        authorization page
  19. Access =ADS= on browser
      - Open the location =http://local-ads.com:8080= from
        the browser and provide the lab id, lab sources url
        and version/tag.
      - View the logs at /root/logs/ovpl.log by
        #+BEGIN_EXAMPLE
        tail -f /root/logs/ovpl.log 
        #+END_EXAMPLE
